/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    macros {
        equalWithSpace: equalWithSpace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp SPACE &kp EQUAL &kp SPACE>;
            label = "EQUALWITHSPACE";
        };
    };

    behaviors {
        hrmt: hrmt {
            compatible = "zmk,behavior-hold-tap";
            label = "Home row Mod-Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <54 55 56 57 50 51 52 53 19 20 21 22 23 32 33 34 35 36 44 45 46 47 48 6 7 8 9 10 21 11 25 37 49 24>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <54 55 56 57 50 51 52 53 0 1 2 3 4 5 12 13 14 15 16 17 18 26 27 28 29 30 31 38 39 40 41 42 43>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
          &kp ESC    &kp N1  &kp N2                &kp N3              &kp N4             &kp N5       &kp N6     &kp N7               &kp N8        &kp N9            &kp N0    &kp MINUS
&kp LWIN  &kp GRAVE  &kp Q   &kp W                 &kp E               &kp R              &kp T        &kp Y      &kp U                &kp I         &kp O             &kp P     &kp LBKT       &mt RWIN RBKT
          &kp TAB    &kp A   &hml LEFT_ALT S       &hml LCTRL D        &hml LEFT_SHIFT F  &kp G        &kp H      &hmr RIGHT_SHIFT J   &hmr RCTRL K  &hmr RIGHT_ALT L  &kp SEMI  &mt RCTRL SQT
          &kp LALT   &kp Z   &kp X                 &kp C               &kp V              &kp B        &kp N      &kp M                &kp COMMA     &kp DOT           &kp FSLH  &mt RALT BSLH
                             &lt 3 LA(LEFT_SHIFT)  &mt LEFT_SHIFT TAB  &lt 2 SPACE        &lt 1 RET    &lt 1 ESC  &mt LEFT_SHIFT BSPC  &lt 2 DEL     &tog 4
            >;
        };

        lower_layer {
            bindings = <
        &trans          &trans    &trans  &trans    &trans    &trans       &trans     &trans    &trans    &trans    &trans    &trans
&trans  &kp UNDER       &kp F1    &kp F2  &kp F3    &kp F4    &kp F5       &kp F6     &kp F7    &kp F8    &kp F9    &kp F10   &kp F11          &mt RGUI F12
        &mt LCTRL PLUS  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &mt RCTRL MINUS
        &mt LALT EQUAL  &kp N1    &kp N2  &kp N3    &kp N4    &kp N5       &kp N6     &kp N7    &kp N8    &kp N9    &kp N0    &trans
                                  &trans  &trans    &trans    &trans       &trans     &trans    &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
        &trans           &trans        &trans        &trans     &trans      &trans       &trans         &trans          &trans          &trans           &trans     &trans
&trans  &kp KP_NUM       &kp KP_SLASH  &kp KP_N7     &kp TAB    &kp EQUAL   &kp CAPS     &kp LC(Y)      &kp BACKSPACE   &kp DEL         &kp LC(X)        &kp LC(Z)  &kp CAPS         &trans
        &mt LCTRL EQUAL  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LSHIFT  &kp MINUS    &kp PAGE_UP    &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &trans     &mt RCTRL K_APP
        &trans           &kp LC(Z)     &kp LC(X)     &kp LC(C)  &kp LC(V)   &kp LC(Y)    &kp PAGE_DOWN  &kp HOME        &kp DOWN_ARROW  &kp END          &trans     &trans
                                       &trans        &trans     &trans      &trans       &trans         &trans          &trans          &trans
            >;
        };

        media {
            bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans    &kp PRINTSCREEN               &kp F10  &kp F11  &kp F12  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &mt C_NEXT C_VOLUME_UP        &kp F7   &kp F8   &kp F9   &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &kp C_PP                      &kp F4   &kp F5   &kp F6   &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &mt C_PREVIOUS C_VOLUME_DOWN  &kp F1   &kp F2   &kp F3   &trans  &trans
                        &trans  &trans  &trans  &trans    &trans                        &trans   &trans   &trans
            >;
        };

        num {
            bindings = <
       &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none            &kp KP_NUM       &kp KP_DIVIDE    &kp KP_MULTIPLY  &kp KP_MINUS  &none
&none  &none       &none         &none         &none         &none         &none           &none            &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_PLUS   &none  &none
       &none       &none         &none         &none         &none         &none           &none            &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_ENTER  &none
       &none       &none         &none         &none         &none         &none           &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT    &none
                                 &none         &trans        &trans        &trans          &trans           &trans           &trans           &trans
            >;
        };
    };
};
